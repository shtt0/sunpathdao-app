Tired of the classic wallet connect modal? dw; this post is here to bring a change in your Dapps. And yes, itâ€™s a very short blog, so stick around!


Wallet Connect Modal (Reown)
Welcome to a new era of seamless user experiences! With Reownâ€™s AppKit, you get: effortless wallet access, one-click authentication, social logins, real-time notifications, and detailed documentation with examples to make integration a easier. Reown is revolutionizing Web3 development, empowering builders to focus on their product by making integration simpler and more powerful.

Ready to create a wallet connect functionality? Hereâ€™s how to get started:

Step 1: Setting Up a Next.js App
Weâ€™ll be working with a Next.js application for this tutorial. If you donâ€™t have one set up, just follow their official documentation. Or simply run in the terminal:

npx create-next-app@latest
Thatâ€™s it. ðŸŽ‰

Step 2: Setting Up Reown AppKit
Install all the necessary dependencies with this command:

npm i @reown/appkit @reown/appkit-adapter-solana @solana/wallet-adapter-wallets
Next, youâ€™ll need a projectId. Head over to Reown Cloud and create a new project to get it. And copy your projectId for later.

Step 3: Configuring Reown AppKit
Inside your src directory, create a config/config.ts file and add the following setup:

import {
    createAppKit,
    useAppKit,
} from '@reown/appkit/react'
import { SolanaAdapter } from '@reown/appkit-adapter-solana/react'
import {
    PhantomWalletAdapter,
    SolflareWalletAdapter,
} from '@solana/wallet-adapter-wallets'
import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'

// Here you have to enter the Project Id for your project which you got in Step 2.
export const projectId = `YOUR_PROJECT_ID` 

// Setup solana adapter: 
// You can add more wallet adapters as per the requirement.
const solanaAdapter = new SolanaAdapter({
    wallets: [
        new PhantomWalletAdapter(),
        new SolflareWalletAdapter()]
})

// Create modal inorder to intialize the Appkit
const modal = createAppKit({
    adapters: [solanaAdapter],
    networks: [solana, solanaTestnet, solanaDevnet],
    metadata: {
        name: 'AppKit React Example',
        description: 'AppKit React Solana Example',
        url: 'https://reown.com/appkit',
        icons: ['https://avatars.githubusercontent.com/u/179229932?s=200&v=4']
    },
    projectId,
    themeMode: 'light',
    features: {
        analytics: true
    }
})

export {
    modal,
    useAppKit,
}
Step 4: Creating the ConnectWallet Component
Create a new component named ConnectWallet.tsx with this code

export default function ConnectWallet() {
  return (
    <>
      <div className="appkit-buttons-container">
        <appkit-button />
        <appkit-network-button />
      </div>
    </>
  );
}
The <appkit-button /> and <appkit-network-button /> are global web components, so you donâ€™t need to import anything!

Step 5: Updating page.tsx
Finally, update your page.tsx to test everything:

/** @format */
"use client";
import ConnectWallet from "@/components/connectWallet";
import { useAppKit } from "@/config/config";

export default function App() {
  useAppKit(); // Activates AppKit's context and initializes necessary systems
  return <ConnectWallet />;
}
If everything is set up correctly, youâ€™re good to go! ðŸŽ‰

If you run into any issues, drop a comment below â€” Iâ€™d be happy to help ðŸ’¬

With just these five steps, youâ€™re all set to provide your users with an amazing UI for wallet interaction, plus loads of connection options. Honestly, Iâ€™m never going back to the WalletModalProvider from @solana/wallet-adapter-react-ui.

Thatâ€™s all for today! Hope you enjoyed the blog. Iâ€™ll be sharing more updates as I continue building this project â€” stay tuned ðŸ«¶